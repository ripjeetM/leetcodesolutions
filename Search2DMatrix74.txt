class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int s = matrix.size();
        if (matrix[0][0]==target) {
            return true;
        }
        if (matrix[s-1][0]==target) {
            return true;
        }
        int l = 1;
        int r = s-2;
        int imp=-1;
        while (l<=r) {
            int mid = (l+r)/2;
            if (matrix[mid][0]==target) {
                return true;
            }
            if (matrix[mid][0]<target && matrix[mid+1][0]>target) {
                imp = mid;
                break;
            }
            if (matrix[mid][0]>target && matrix[mid-1][0]<target) {
                imp = mid - 1;
                break;
            }
            if (matrix[mid][0]<target) {
                l = mid + 1;
            }
            else {
                r = mid - 1;
            }
        }
        //check seperately for imp=-1
        //perform binary search for the last row in that case
        if (imp==-1) {
            imp = s - 1;
            l = 0;
            r = matrix[0].size() - 1;
            while(l<=r) {
                int mid = (l+r)/2;
                if (matrix[imp][mid]==target) {
                    return true;
                }
                if (matrix[imp][mid]>target) {
                    r = mid - 1;
                }
                else {
                    l = mid + 1;
                }
            }
            return false;
        }
        l = 0;
        r = matrix[0].size()-1;
        while (l<=r) {
            int mid = (l+r)/2;
            if (matrix[imp][mid]==target) {
                return true;
            }
            if (matrix[imp][mid]>target) {
                r = mid - 1;
            }
            else { 
                l = mid + 1;
            }
        }
        return false;
    }
};