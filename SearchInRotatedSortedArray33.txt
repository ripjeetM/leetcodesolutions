class Solution {
public:
    int search(vector<int>& nums, int target) {
        if (nums.size()<=3) {
            for (int i=0; i<nums.size(); i++) {
                if (nums[i]==target) {
                    return i;
                }
            }
            return -1;
        }
        if (nums[0]<=nums[nums.size()-1]) {
            int l = 0;
            int r = nums.size() - 1;
            while (l<=r) {
                int mid = (l+r)/2;
                if (nums[mid]==target) {
                    return mid;
                }
                if (nums[mid]>target) {
                    r = mid - 1;
                }
                else {
                    l = mid + 1;
                }
            }
            return -1;
        }
        if (nums[nums.size()-1]==target) {
            return nums.size()-1;
        }
        if (nums[0]==target) {
            return 0;
        }
        int l = 1;
        int r = nums.size() - 2;
        int imp;
        while (l<=r) {
            int mid = (l+r)/2;
            if (nums[mid]<nums[mid-1]) {
                imp = mid;
                break;
            }
            if (nums[mid]>nums[mid+1]) {
                imp = mid + 1;
                break;
            }
            else if (nums[mid]>nums[0]) {
                l = mid + 1;
            }
            else {
                r = mid - 1;
            }
        }
        if (target==nums[0]) {
            return 0;
        }
        if (target>nums[0]) {
            l = 0;
            r = imp - 1;
        }
        else {
            l = imp;
            r = nums.size() - 1;
        }
        while (l<=r) {
            int mid = (l+r)/2;
            if (nums[mid]==target) {
                return mid;
            }
            if (nums[mid]<target) {        
                l = mid + 1;
            }
            else {
                r = mid - 1;
            }
        }
        return -1;
    }
};